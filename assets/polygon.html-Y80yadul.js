import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as o,d as r,e as i,o as n}from"./app-CARu8aWL.js";const l={};function s(c,e){return n(),a("div",null,[e[0]||(e[0]=o("p",null,"本页面将简要介绍使用多人协作出题平台 Polygon 出题",-1)),r(" more "),e[1]||(e[1]=i('<h2 id="📍简介" tabindex="-1"><a class="header-anchor" href="#📍简介"><span>📍简介</span></a></h2><p>网址：<a href="https://polygon.codeforces.com/" target="_blank" rel="noopener noreferrer">Index Page - Polygon</a></p><p><code>Polygon</code> 是一个支持多人协作的出题平台，功能非常完善。官网描述为「<code>Polygon</code> 的使命是为创建编程竞赛题目提供平台。」</p><p>在 <code>Codeforces (CF)</code> 出题必须使用 <code>Polygon</code>。在其它地方出题，尤其是多人合作出题时，使用 <code>Polygon</code> 也是不错的选择。</p><p>优点</p><blockquote><p>有版本管理系统，多人合作时不会乱成一团，也不需要互相传文件。</p></blockquote><blockquote><p>出题系统完善，validator、generator、checker、solutions 环环相扣，输出自动生成。</p></blockquote><blockquote><p>可以为 solutions 设置标签，错解 AC、正解未 AC 都会警告，方便地逐一卡掉错解。</p></blockquote><blockquote><p>可以方便地对拍，拍出来的数据可以直接添加到题目数据中。</p></blockquote><blockquote><p>发现问题可以提 issue，而不会被消息刷屏却一直没有 fix。</p></blockquote><blockquote><p>为日后出 CF 做准备。</p></blockquote><blockquote><p>……</p></blockquote><h2 id="📍题目创建" tabindex="-1"><a class="header-anchor" href="#📍题目创建"><span>📍题目创建</span></a></h2><p>Polygon 的大部分功能都不需要学，能看懂英文就基本能用了。</p><p>进入网址后，先注册登陆，然后点击 New Problem 开始创建一个题目表格，注意此处的 Name 只是项目名，不是最终的题目名。</p><figure><img src="https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/1a7bc3e73df9011e52cbadc512dec334.png?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击 start 开始编辑题目</p><figure><img src="https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/be5f3d642203c4f61f5c00ddaa0e01d8.png?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="📌️general-info" tabindex="-1"><a class="header-anchor" href="#📌️general-info"><span>📌️General Info</span></a></h3><p>在这个页面中可以设置题目的时间限制、空间限制、题目类型（是否为交互题）。</p><figure><img src="https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/8223ce9d846cd1c818d85d02fe8370f9.png?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="📌️statement" tabindex="-1"><a class="header-anchor" href="#📌️statement"><span>📌️Statement</span></a></h3><p>这个页面是用来写题面和题解的。还可以通过 &quot;Review&quot; 按钮来查看题面、validator 与 checker，一般用于审核。 可以通过最上方的 &quot;In HTML&quot; 链接查看渲染后的题面，通过 &quot;Tutorial in HTML&quot; 查看渲染后的题解。</p><p>如果需要在题面中添加图片，需要先在下面的 &quot;Statement Resource Files&quot; 中上传图片，然后在题面中加上 \\includegraphics{filename.png}。</p><div class="hint-container important"><p class="hint-container-title">注意</p><ul><li><p>题面和题解都需要使用 LaTeX 的语法，不能使用 Markdown。</p></li><li><p>题面编辑内容不包括样例，样例在 Tests 中生成</p></li><li><p>题面编辑完后需要 Save</p></li></ul></div><figure><img src="https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/03b42dff212e07c64a7d47bc9fd34e38.png?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="📌️files" tabindex="-1"><a class="header-anchor" href="#📌️files"><span>📌️Files</span></a></h3><p>&quot;Source Files&quot; 是用来存放 除了 solutions 外 的其它代码的，如 validator、checker、generator，如果是 IO 式交互题还有 interactor。</p><p>如果这些代码需要 include 其它文件，例如 <a href="https://github.com/ouuan/Tree-Generator" target="_blank" rel="noopener noreferrer">Tree-Generator</a>，需要放在 &quot;Resource Files&quot; 中。</p><p><a href="https://codeforces.com/blog/entry/66916" target="_blank" rel="noopener noreferrer">grader</a> 式交互参见 官方教程。</p><figure><img src="https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/89b1290836bb61acf122bbcf74fd9b7d.png?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="📌️checker" tabindex="-1"><a class="header-anchor" href="#📌️checker"><span>📌️Checker</span></a></h3><p>testlib.h 提供了一些内置的 checker，在选择框中有简要介绍，也可以选择后再点 &quot;View source&quot; 查看源码。</p><figure><img src="https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/f7367be4a9a14c896f99df8605f50d90.png?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container important"><p class="hint-container-title">注意</p><p>后续需要自定义 validator、checker、generator、interactor 文件，均需要包含头文件 <code>testlib.h</code></p><p>自行去 <a href="https://github.com/MikeMirzayanov/testlib" target="_blank" rel="noopener noreferrer">https://github.com/MikeMirzayanov/testlib</a> 将项目 clone 下来</p><figure><img src="https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/3550f46da35a78ff6745f98e82ed03b3.png?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>如果需要自己编写 checker，请参考官方 <a href="https://codeforces.com/blog/entry/18431" target="_blank" rel="noopener noreferrer">checker</a> 教程。</p><p>下面的 &quot;Checker tests&quot; 是通过 &quot;Add test&quot; 添加若干组输出以及对应的期望评测结果，然后点击 &quot;Run tests&quot; 就可以测试 checker 是否正确返回了评测结果。</p><h3 id="📌️interactor" tabindex="-1"><a class="header-anchor" href="#📌️interactor"><span>📌️Interactor</span></a></h3><p>在 General Info 页面中勾选了 Interactive 才有该选项</p><p>仅 IO 式交互题需要，请参考官方 <a href="https://codeforces.com/blog/entry/18455" target="_blank" rel="noopener noreferrer">interactor</a> 教程。</p><h3 id="📌️validator" tabindex="-1"><a class="header-anchor" href="#📌️validator"><span>📌️Validator</span></a></h3><p>validator 用来检测数据合法性，编写请参考官方 <a href="https://codeforces.com/blog/entry/18426" target="_blank" rel="noopener noreferrer">validator</a> 教程。</p><p>下面的 &quot;Validator tests&quot; 类似于 &quot;Checker tests&quot;，需要提供输入和期望是否合法，用来测试 validator。</p><h3 id="📌️tests" tabindex="-1"><a class="header-anchor" href="#📌️tests"><span>📌️Tests</span></a></h3><p>这个页面是用来管理数据的。</p><figure><img src="https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/9a5ad03dfa212cac38960239ad14441a.png?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>运行脚本后即可得到下述的各个数据，其中点击每个测试点的 Example 可以将测试点设置为样例，即展示在题面中。</p><p>测试点的 Example 如果勾选了 &quot;Use in statements&quot;，这组数据就会成为样例，自动加在题面里。</p><figure><img src="https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/05d0c0919461eaaf140874d97815ab4d.png?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以参考 <a href="https://polygon.codeforces.com/docs/freemarker-manual" target="_blank" rel="noopener noreferrer">Polygon 提供的教程</a> 使用 Freemarker 来批量生成脚本。</p><h3 id="📌️stresses" tabindex="-1"><a class="header-anchor" href="#📌️stresses"><span>📌️Stresses</span></a></h3><p>这个页面是用来对拍的。</p><p>点击 &quot;Add Stress&quot; 就可以添加一组对拍，&quot;Script pattern&quot; 是一个生成数据的脚本，其中可以使用 &quot;[10..100]&quot; 之类的来表示在一个范围内随机选择。</p><p>然后运行对拍，如果拍出错就会显示 &quot;Crashed&quot;，并且可以一键把这组数据加到 Tests 中。</p><h3 id="📌️solution-files" tabindex="-1"><a class="header-anchor" href="#📌️solution-files"><span>📌️Solution Files</span></a></h3><p>这个页面是用来放解这道题的代码的，可以是正解也可以是错解。将错解传上来可以便捷地卡掉它们，也可以提醒自己需要卡掉它们。</p><h3 id="📌️invocations" tabindex="-1"><a class="header-anchor" href="#📌️invocations"><span>📌️Invocations</span></a></h3><p>这个页面是用来运行 solutions 的。</p><p>选择代码和测试点就可以运行了，之后可以在列表里点进去（&quot;View&quot;）查看详细信息。</p><p>评测状态 &quot;FL&quot; 表示评测出错了，一般是数据没有过 validate 或者 validator/checker/interactor 之类的 RE 了。&quot;RJ&quot; 有两种情况，一种是出现了 &quot;FL&quot;，另一种是这份代码第一个测试点就没有通过。</p><p>如果用时在时限的一半到两倍之间，会用黄色标识出来。</p><p>如果数据中存在变量没有达到最小值或最大值，会在最下方提醒。</p><h3 id="📌️issues" tabindex="-1"><a class="header-anchor" href="#📌️issues"><span>📌️Issues</span></a></h3><p>用来提 Issue 的地方。</p><h3 id="📌️packages" tabindex="-1"><a class="header-anchor" href="#📌️packages"><span>📌️Packages</span></a></h3><p>Package 包含了一道题的全部信息。Commit Changes 后，点击 Standard 即可进行打包。打包成功后，基本的题目就算创建完成了。</p><p>&quot;Verify&quot; 是测试所有 solution 都符合标签（AC、WA、TLE），并且 checker 通过 checker tests，validator 通过 validator tests。</p>',67))])}const h=t(l,[["render",s],["__file","polygon.html.vue"]]),d=JSON.parse('{"path":"/zh/learning/problemCreate/polygon.html","title":"Polygon","lang":"zh-CN","frontmatter":{"title":"Polygon","icon":"p","order":1,"category":["Polygon"],"description":"本页面将简要介绍使用多人协作出题平台 Polygon 出题","head":[["meta",{"property":"og:url","content":"https://thirty-li.github.io/blogs/blogs/zh/learning/problemCreate/polygon.html"}],["meta",{"property":"og:site_name","content":"Thirty_Li"}],["meta",{"property":"og:title","content":"Polygon"}],["meta",{"property":"og:description","content":"本页面将简要介绍使用多人协作出题平台 Polygon 出题"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/1a7bc3e73df9011e52cbadc512dec334.png?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-31T03:04:52.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-31T03:04:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Polygon\\",\\"image\\":[\\"https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/1a7bc3e73df9011e52cbadc512dec334.png?raw=true\\",\\"https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/be5f3d642203c4f61f5c00ddaa0e01d8.png?raw=true\\",\\"https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/8223ce9d846cd1c818d85d02fe8370f9.png?raw=true\\",\\"https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/03b42dff212e07c64a7d47bc9fd34e38.png?raw=true\\",\\"https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/89b1290836bb61acf122bbcf74fd9b7d.png?raw=true\\",\\"https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/f7367be4a9a14c896f99df8605f50d90.png?raw=true\\",\\"https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/3550f46da35a78ff6745f98e82ed03b3.png?raw=true\\",\\"https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/9a5ad03dfa212cac38960239ad14441a.png?raw=true\\",\\"https://github.com/Thirty-Li/typoraImg/blob/main/blogImage/05d0c0919461eaaf140874d97815ab4d.png?raw=true\\"],\\"dateModified\\":\\"2024-10-31T03:04:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Thirty_Li\\",\\"url\\":\\"https://thirty-li.github.io/blogs/\\"}]}"]]},"headers":[{"level":2,"title":"📍简介","slug":"📍简介","link":"#📍简介","children":[]},{"level":2,"title":"📍题目创建","slug":"📍题目创建","link":"#📍题目创建","children":[{"level":3,"title":"📌️General Info","slug":"📌️general-info","link":"#📌️general-info","children":[]},{"level":3,"title":"📌️Statement","slug":"📌️statement","link":"#📌️statement","children":[]},{"level":3,"title":"📌️Files","slug":"📌️files","link":"#📌️files","children":[]},{"level":3,"title":"📌️Checker","slug":"📌️checker","link":"#📌️checker","children":[]},{"level":3,"title":"📌️Interactor","slug":"📌️interactor","link":"#📌️interactor","children":[]},{"level":3,"title":"📌️Validator","slug":"📌️validator","link":"#📌️validator","children":[]},{"level":3,"title":"📌️Tests","slug":"📌️tests","link":"#📌️tests","children":[]},{"level":3,"title":"📌️Stresses","slug":"📌️stresses","link":"#📌️stresses","children":[]},{"level":3,"title":"📌️Solution Files","slug":"📌️solution-files","link":"#📌️solution-files","children":[]},{"level":3,"title":"📌️Invocations","slug":"📌️invocations","link":"#📌️invocations","children":[]},{"level":3,"title":"📌️Issues","slug":"📌️issues","link":"#📌️issues","children":[]},{"level":3,"title":"📌️Packages","slug":"📌️packages","link":"#📌️packages","children":[]}]}],"git":{"createdTime":1729772282000,"updatedTime":1730343892000,"contributors":[{"name":"Thirty_Li","email":"thirty_li@qq.com","commits":2}]},"readingTime":{"minutes":4.52,"words":1357},"filePathRelative":"zh/learning/problemCreate/polygon.md","localizedDate":"2024年10月24日","excerpt":"<p>本页面将简要介绍使用多人协作出题平台 Polygon 出题</p>\\n","autoDesc":true}');export{h as comp,d as data};
